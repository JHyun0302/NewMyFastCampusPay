plugins {
	id 'com.palantir.docker' version '0.35.0'
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.newfastcampuspay.membership'
version = '1.0.0-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

ext{
	axonVersion = "4.6.0"
}

repositories {
	mavenCentral()
}

dependencies {
	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	//test
	testImplementation 'com.tngtech.archunit:archunit:1.0.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'junit:junit:4.13.1'

	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//kafka
	implementation 'org.springframework.kafka:spring-kafka'

	//configuration-processor
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	//lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	//DB
//	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	//Common 모듈
	implementation project(path: ':common')
}

tasks.named('test') {
	useJUnitPlatform()
}

docker {
	//디버깅
	println(tasks.bootJar.outputs.files)
	//이미지 이름
	name rootProject.name + '-' + project.name + ":" + version
	// 어떤 Dockerfile
	dockerfile file('../Dockerfile')
	//어떤 파일들을 Dockerfile에 복사할 것인가
	files tasks.bootJar.outputs.files
	//Dockerfile 에 전달할 인자
	buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}